{"version":3,"file":"/home/usuario/p10/src/ejercicio3/class/User.ts","sources":["/home/usuario/p10/src/ejercicio3/class/User.ts"],"names":[],"mappings":";;;AACA;;GAEG;AACH,MAAa,IAAI;IAKf;;;OAGG;IACH,YAAoB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAC9B,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IACjB,CAAC;IACD;;;OAGG;IACI,OAAO,CAAC,OAAe;QAC5B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;IACtB,CAAC;IACD;;;OAGG;IACI,OAAO;QACZ,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IACD;;;OAGG;IACI,OAAO,CAAC,IAAU;QACvB,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC;IACD;;;OAGG;IACI,UAAU,CAAC,SAAiB;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,KAAK,SAAS,CAAC,CAAC;IAClE,CAAC;IAED;;;OAGG;IACI,QAAQ;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IACD;;;;OAIG;IACI,UAAU,CAAC,KAAa;QAC7B,IAAI,KAAK,GAAY,IAAI,CAAC;QAC1B,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,EAAE;YACjD,KAAK,CAAC;SACP;aAAM;YACL,KAAK,GAAG,KAAK,CAAC;SACf;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,YAAY;QACjB,IAAI,GAAG,GAAW,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACzB,GAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;QAC/B,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACb,CAAC;CAkBF;AAvFD,oBAuFC;AACD,0BAA0B;AAC1B,gCAAgC;AAChC,+BAA+B;AAC/B,sDAAsD;AACtD,oDAAoD;AACpD,uBAAuB;AACvB,uBAAuB;AACvB,wBAAwB;AACxB,4BAA4B;AAC5B,oBAAoB;AACpB,qBAAqB;AACrB,sCAAsC","sourcesContent":["import { Note } from './Note';\n/**\n * Clase que representa a un Usuario\n */\nexport class User {\n  /**\n   * atributo privado que contiene una lista de notas del usuario\n   */\n  private list: Note[];\n  /**\n   * Constructor de la clase\n   * @param name Nombre del usuario\n   */\n  constructor(private name: string) {\n    this.list = [];\n  }\n  /**\n   * \n   * @param newName \n   */\n  public setName(newName: string): void {\n    this.name = newName;\n  }\n  /**\n   * Getter para 'name'\n   * @returns nombre del usuario\n   */\n  public getName(): string {\n    return this.name;\n  }\n  /**\n   * Agrega una nota\n   * @param note nota a agregar\n   */\n  public setNote(note: Note): void {\n    this.list = [...this.list, note];\n  }\n  /**\n   * Elimina una nota\n   * @param titleNota titulo de la nota a eliminar \n   */\n  public removeNote(titleNota: string): void {\n    this.list = this.list.filter((n) => n.getTitle() !== titleNota);\n  }\n\n  /**\n   * Getter para 'list' de notas\n   * @returns devuelve la lista de notas\n   */\n  public getNotes(): Note[] {\n    return this.list;\n  }\n  /**\n   * Busca la nota del usuario\n   * @param title \n   * @returns \n   */\n  public searchNote(title: string): boolean {\n    let value: boolean = true;\n    if (this.list.find((n) => n.getTitle() === title)) {\n      value;\n    } else {\n      value = false;\n    }\n    return value;\n  }\n\n  public getTitleNote(): string {\n    let out: string = '';\n    this.list.forEach((note) => {\n      out = `${note.getTitle()}\\n`;\n    });\n    return out;\n  }\n  \n  /**\n   * Devuelve 'true' si encuentra la nota del usuario\n   * @param nameNote nombre de la nota\n   * @returns valor booleano\n   */\n  // public existNoteUser(nameNote: string): boolean {\n  //   let value: boolean = true;\n  //   this.getListNotes().forEach((note) => {\n  //     if (note.getTitle() === nameNote) {\n  //       return value;\n  //     } else {\n  //       return value = false;\n  //     }\n  //   });\n  //   return value;\n  // }\n}\n// let users: User[] = [];\n// let user = new User('elvis');\n// let user2 = new User('fer');\n// let nota1 = new Note('puchi', 'asdhflña0', 'lsls');\n// let nota2= new Note('cora', 'asdhflña0', 'lsls');\n// user.setNote(nota1);\n// user.setNote(nota2);\n// user2.setNote(nota1);\n// user.removeNote('puchi');\n// users.push(user);\n// users.push(user2);\n// console.log( user instanceof User);"]}